/*
 * BSD 3-Clause License
 *
 * Copyright (c) 2021, Yusuf Arfan Ismail
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
plugins {
    id 'java'
    id "com.diffplug.spotless" version "5.16.0"
    id "name.remal.sonarlint" version "1.5.0"
}

ext {
    dev_id = 'yusuf'
    dev_name = 'Yusuf Ismail'
    dev_email = 'ysufgamer222@gmail.com'
    dev_organization = 'Yusufs Discord bot'
    dev_organizationUrl = 'https://github.com/YusufsDiscordbot'

    gpl_name = 'GNU Library General Public License version 3'
    gpl_url = 'https://github.com/YusufsDiscordbot/YusufIsmails-Discord-core/blob/JDA/LICENSE'

    // Make sure we have a default for initial configuration evaluation
    isReleaseVersion = false
}

allprojects {
    //Maven published can be found in application's gradle
    group='io.github.yusufsdiscordbot'

    // When it comes to publishing we need to ensure we have the subproject version set
    // rather than the root project version
    afterEvaluate { project ->
        ext.isReleaseVersion = !version.endsWith("RELEASE")
    }
}
sourceCompatibility = JavaVersion.VERSION_17

subprojects {
    apply plugin: "java"
    apply plugin: "com.diffplug.spotless"
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'


    // All subprojects inherit root project group and version, to avoid duplication.
    group = rootProject.group
    version = rootProject.version

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation("junit:junit:4.12")
    }

    compileJava {
        // Makes spotlessApply task run on every compile/build.
        dependsOn 'spotlessApply'

        // Nails the Java-Version of every Subproject
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    spotless {
        java {
            // Excludes build folder since it contains generated java classes.
            targetExclude("build/**")
            eclipse('4.19.0').configFile("${rootProject.rootDir}/meta/formatting/google-style-eclipse.xml")
        }
    }

    javadoc {
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
            logging.captureStandardError LogLevel.INFO
            logging.captureStandardOutput LogLevel.INFO
        }

        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                //artifactId = project.artifactId // or maybe archiveBaseName?
                from components.java
                pom {
                    name = project.archivesBaseName
                    description = project.description
                    url = "https://github.com/YusufsDiscordbot/YusufIsmails-Discord-core"
                    packaging = "jar"

                    licenses {
                        license {
                            name = "${gpl_name}"
                            url = "${gpl_url}"
                        }
                    }
                    developers {
                        developer {
                            id = "${dev_id}"
                            name = "${dev_name}"
                            email = "${dev_email}"
                            organization = "${dev_organization}"
                            organizationUrl = "${dev_organizationUrl}"
                        }
                    }
                    scm {
                        connection = 'https://github.com/YusufsDiscordbot/YusufIsmails-Discord-core.git'
                        developerConnection = 'scm:git:ssh://git@github.com/YusufsDiscordbot/YusufIsmails-Discord-core.git'
                        url = 'github.com/YusufsDiscordbot/YusufIsmails-Discord-core'
                    }
                }
            }
        }
        repositories {
            maven {
                afterEvaluate { project ->
                    def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    url = (isReleaseVersion) ? releaseRepo : snapshotRepo

                    //println "repos: " + version
                    //println "repos: " + isReleaseVersion
                    //println url

                    credentials {
                        username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                        password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
                    }
                }
            }
        }
    }
    signing {
        afterEvaluate { project ->
            //println "sign: " + version
            //println "sign: " + isReleaseVersion
            required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
            sign publishing.publications.mavenJava
        }
    }
}
