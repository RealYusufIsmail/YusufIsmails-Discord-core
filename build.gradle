/*
 * GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
 * Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone is permitted to
 * copy and distribute verbatim copies of this license document, but changing it is not allowed.
 * Yusuf Arfan Ismail
 * The GNU General Public License is a free, copyleft license for software and other kinds of works.
 * The licenses for most software and other practical works are designed to take away your freedom
 * to share and change the works. By contrast, the GNU General Public License is intended to
 * guarantee your freedom to share and change all versions of a program--to make sure it remains
 * free software for all its users. We, the Free Software Foundation, use the GNU General Public
 * License for most of our software; it applies also to any other work released this way by its
 * authors. You can apply it to your programs, too.
 */
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "com.diffplug.spotless" version "6.8.0"
    id "name.remal.sonarlint" version "1.5.0"
    id 'jacoco'
}

ext {
    dev_id = 'yusuf'
    dev_name = 'Yusuf Ismail'
    dev_email = 'yusufgamer222@gmail.com'
    dev_organization = 'Yusufs Discord bot'
    dev_organizationUrl = 'https://github.com/YusufsDiscordbot'

    gpl_name = 'GNU Library General Public License version 3'
    gpl_url = 'https://github.com/YusufsDiscordbot/YusufIsmails-Discord-core/blob/Master/LICENSE'

    // Make sure we have a default for initial configuration evaluation
    isReleaseVersion = false
}

allprojects {
    //Maven published can be found in application's gradle
    group = 'io.github.yusufsdiscordbot'

    apply plugin: "java"
    apply plugin: "com.diffplug.spotless"
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'jacoco' // code coverage reports

    // When it comes to publishing we need to ensure we have the subproject version set
    // rather than the root project version
    afterEvaluate { project ->
        ext.isReleaseVersion = !version.endsWith("RELEASE")
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven {
            url 'https://m2.dv8tion.net/releases'
        }
    }

    dependencies {
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha15'
        implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha15'
        implementation group: 'ch.qos.logback', name: 'logback-access', version: '1.3.0-alpha15'
        implementation 'org.jetbrains:annotations:23.0.0'
        implementation group: 'io.github.yusufsdiscordbot', name: 'annotations', version: '1.0.9'
        //org apache commons-collections
        implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    jacocoTestReport {
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests."
        reports {
            xml.enabled true
            html.enabled true
        }
        jacocoTestReport.dependsOn test
        jacocoTestCoverageVerification.dependsOn jacocoTestReport
    }

    jacocoTestCoverageVerification {
        group = "Reporting"
        description = "Verify Jacoco coverage after running tests."
        jacocoTestCoverageVerification.dependsOn test
    }

    configurations.all {
        //noinspection GrUnresolvedAccess
        // ez vulnerability fix
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }

    check.dependsOn jacocoTestReport
}

subprojects {
    //some parts of this gradle copy tj's bot. 
    //so all credits for that goes towards java Together-Java https://github.com/Together-Java/TJ-Bot/blob/a2a963a9e51792018f1beff3b41b6ba9eab0ca50/build.gradle#L25
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'jacoco' // code coverage reports

    // All subprojects inherit root project group and version, to avoid duplication.
    group = rootProject.group
    version = rootProject.version

    def compileJavaTask = {
        // Makes spotlessApply task run on every compile/build.
        dependsOn 'spotlessApply'

        // Nails the Java-Version of every Subproject
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    compileJava(compileJavaTask)
    compileTestJava(compileJavaTask)

    spotless {
        java {
            // Excludes build folder since it contains generated java classes.
            targetExclude("build/**")
            eclipse('4.21.0').configFile("${rootProject.rootDir}/meta/formatting/google-style-eclipse.xml")
        }
    }

    javadoc {
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
            logging.captureStandardError LogLevel.INFO
            logging.captureStandardOutput LogLevel.INFO
        }

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                //artifactId = project.artifactId // or maybe archiveBaseName?
                from components.java
                pom {
                    name = project.archivesBaseName
                    description = project.description
                    url = "https://github.com/YusufsDiscordbot/YusufIsmails-Discord-core"
                    packaging = "jar"

                    licenses {
                        license {
                            name = "${gpl_name}"
                            url = "${gpl_url}"
                        }
                    }
                    developers {
                        developer {
                            id = "${dev_id}"
                            name = "${dev_name}"
                            email = "${dev_email}"
                            organization = "${dev_organization}"
                            organizationUrl = "${dev_organizationUrl}"
                        }
                    }
                    scm {
                        connection = 'https://github.com/YusufsDiscordbot/YusufIsmails-Discord-core.git'
                        developerConnection = 'scm:git:ssh://git@github.com/YusufsDiscordbot/YusufIsmails-Discord-core.git'
                        url = 'github.com/YusufsDiscordbot/YusufIsmails-Discord-core'
                    }
                }
            }
        }
        repositories {
            maven {
                afterEvaluate { project ->
                    def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    url = (isReleaseVersion) ? releaseRepo : snapshotRepo

                    //println "repos: " + version
                    //println "repos: " + isReleaseVersion
                    //println url

                    credentials {
                        username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                        password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
                    }
                }
            }
        }
    }
    signing {
        afterEvaluate { project ->
            //println "sign: " + version
            //println "sign: " + isReleaseVersion
            required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
            sign publishing.publications.mavenJava
        }
    }
}